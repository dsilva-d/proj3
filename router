#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class Router:
  """ Your Router """
  def __init__(self, asn, networks):
    self.asn = asn
    self.routes = {}
    self.updates = {}
    self.relations = {}
    self.sockets = {}
    self.revoke = {}
    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  # Returns all possible routes to daddr
  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    outroutes = []
    ladd = daddr.split(".")
    ladd.pop(len(ladd) - 1)
    ladd.append(0)
    daddr = str(ladd[0]) + '.' + str(ladd[1]) + '.' + str(ladd[2]) + '.' + str(ladd[3])
    # For every peer, if there is a route to the daddr, add it to outroutes 
    for srcif in self.sockets:
       try:
         outroutes.append(self.routes[(daddr, srcif)]) ## key is ip name, and peer/src
       except:
         pass
    return outroutes
  
  # Get the network(s) that all have the longest netmask
  def get_longest_prefix(self, routes):
    outroutes = []
    longest = 0

    # Gets longest netmask
    for route in routes:
      netmask = route['netmask'].split(".")
      num = int(netmask[0]) + int(netmask[1]) + int(netmask[2]) + int(netmask[3])
      if num > longest:
        longest = num
    # Adds routes with the longest netmask to outroute
    for route in routes:
      netmask = route['netmask'].split(".")
      num = int(netmask[0]) + int(netmask[1]) + int(netmask[2]) + int(netmask[3])
      if num >= longest:
        outroutes.append(route) 
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    sasp = float('inf')
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      asp = len(details['msg']['ASPath'])
      if sasp > asp:
        sasp = asp
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      asp = len(details['msg']['ASPath'])
      if asp <= sasp:
        outroutes.append(route)

    return outroutes
  
  # Returns all routes with the highest preference
  def get_highest_preference(self, routes):
    """ select the route with the highest local preference """
    outroutes = []
    high = 0

    # Gets highest local preference
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      localpref = details['msg']['localpref']
      if localpref > high:
        high = localpref
    # Adds all routes with highest local pref to outroutes
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      localpref = details['msg']['localpref']
      if localpref >= high:
        outroutes.append(route)
    return outroutes

  # Returns all routes where the self origin is preferential
  def get_self_origin(self, routes):
    """ select self originating routes """
    outroutes = []
    fromself = False

    # Determines if any route has self origin true
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      selforigin = details['msg']['selfOrigin']
      if selforigin:
        fromself = True
        outroutes.append(route)

    if fromself:
      return outroutes
    else:
      return routes

  def get_origin_routes(self, routes):
    """ select origin routes: IGP > EGP > UNK """
    outroutes = []
    borig = 'UNK'
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      corig = details['msg']['origin']
      if(corig == 'IGP'):
        borig = 'IGP'
      if(corig == 'EGP' and borig != 'IGP'):
        borig = 'EGP'
    for route in routes:
      details = self.updates[(route['peer'], route['network'])]
      corig = details['msg']['origin']
      if(corig == borig):
        outroutes.append(route)
    return outroutes

  def get_lowest_ip(self, routes):
     """ select peer with the lowest ip address """
     outroutes = []
     lip = float('inf')
     for route in routes:
       cip = route['peer'].split(".")
       cnum = int(cip[0]) + int(cip[1]) + int(cip[2]) + int(cip[3])
       if(cnum < lip):
         lip = cnum
     for route in routes:
       cip = route['peer'].split(".")
       cnum = int(cip[0]) + int(cip[1]) + int(cip[2]) + int(cip[3])
       if(cnum <= lip):
         outroutes.append(route)
     return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return routes

  # Finds the best route for the given destination address
  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    
    # Rules go here
    if routes:
      # 0. Checking netmask length
      routes = self.get_longest_prefix(routes)
      # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      routes = self.get_lowest_ip(routes)
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
      peer = routes[0]["peer"]
    return self.sockets[peer] if peer else None

  # Added
  # Sends the given data packet to the appropriate destination or returns False if it cannot.
  def send_data(self, srcif, packet):
      """find the route and send data message"""
      conn = self.get_route(srcif,packet['dst'])
      if(conn != None):
         msgout = json.dumps(packet)
         conn.sendall(msgout.encode())
         return True
      else:
         return False

  # Sending the given packet to the daddr with our router as the source
  def sendOne(self, daddr, packet):
    packet['src'] = daddr.rstrip('2') + '1'
    packet['dst'] = daddr
          
    conn = self.sockets[daddr]      
    msgout = json.dumps(packet)
    conn.sendall(msgout.encode())


  # Forwards the given packet to the surrounding sockets
  def forward(self, srcif, packet):
    """ Forward a data packet """
    packet['msg']['ASPath'].append(self.asn)

    if self.relations[srcif] == 'cust':
      for sock in self.sockets:
        if sock != srcif:
          self.sendOne(sock, packet)
    else:
      for sock in self.sockets:
        if self.relations[sock] == 'cust':
          self.sendOne(sock, packet)
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False
  
  # Stores update message, forwards updates to neighbors if need be, updates forwarding table
  def update(self, srcif, packet):
    """ handle update packets """
    # TODO Verify that the storing of updates won't have overlapping entries
    # TODO Verify that the forwarding address will work in the case of overlapping entries
    self.updates[(srcif,packet['msg']['network'])] = packet

    rdic = {"network" : packet['msg']['network'], "netmask" : packet['msg']['netmask'], "peer" : srcif}
    self.routes[(str(packet['msg']['network']), str(srcif))] = rdic ## key is (network name, peer/src)
    self.forward(srcif, packet)
    return True

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  # Sends a copy of our routing table to the src of the packet
  def dump(self, packet):
    """ handles dump table requests """
    
    tmp = packet["src"]
    packet["src"] = packet["dst"]
    packet["dst"] = tmp
    packet["type"] = "table"
    packet["msg"] = list(self.routes.values()) 
    
    conn = self.sockets[tmp]
    msgout = json.dumps(packet)
    conn.sendall(msgout.encode())

    return True
  
  # Receives the message from another router and send it to the correct handler method
  def handle_packet(self, srcif, packet):
    """ dispatches a packet """
    if packet['type'] == 'update':
      return self.update(srcif, packet)
    if packet['type'] == 'dump':
      return self.dump(packet)
    if packet['type'] == 'data':
      return self.send_data(srcif, packet)
    # TODO Route revoke, and other messages to the correct handler
    return False
  
  # Send a no route message through the connection
  def send_error(self, conn, msg):
    """ Send a no_route error message """
    print("No route")
    # TODO
    return

  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int, help="asn")
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.asn,ARGS.networks).run()
